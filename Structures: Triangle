#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct Tri{
    int x1;
    int y1;
    int x2;
    int y2;
    int x3;
    int y3;
} Tri;

void getTri(Tri* d){
    int a, b;
    scanf("%d %d", &a, &b);
    d->x1 = a;
    d->y1 = b;
    scanf("%d %d", &a, &b);
    d->x2 = a;
    d->y2 = b;
    scanf("%d %d", &a, &b);
    d->x3 = a;
    d->y3 = b;
}

void writeTri(Tri d1){
    printf("%d %d\n", d1.x1, d1.y1);
    printf("%d %d\n", d1.x2, d1.y2);
    printf("%d %d\n", d1.x3, d1.y3);
}

float squareTri(Tri tr1){
    float s;
    s = ((tr1.x1 - tr1.x3) * (tr1.y2 - tr1.y3)) - ((tr1.y1 - tr1.y3) * (tr1.x2 - tr1.x3));
    s = s/2;
    return fabs(s);
}

float length(int x1, int y1, int x2, int y2){
    float l;
    l = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    return l;
}

float perimTri(Tri d){
    float p;
    p = length(d.x1, d.y1, d.x2, d.y2) + length(d.x2, d.y2, d.x3, d.y3) + length(d.x1, d.y1, d.x3, d.y3);
    if (squareTri(d) != 0){
        return p;
    } else {
        return (p/2);
    }
}

void rotate90(Tri * a){
    int k;
    k = a->x1;
    a->x1 = a->y1;
    a->y1 = (-1) * k;

    k = a->x2;
    a->x2 = a->y2;
    a->y2 = (-1) * k;

    k = a->x3;
    a->x3 = a->y3;
    a->y3 = (-1) * k;

    return * a;
}

int main(){
    struct Tri a;
    float s, p;

    getTri(&a);
    
    printf("\n\n");

    printf("writeTri:\n");
    writeTri(a);
    printf("\n\n");

    printf("squareTri:\n");
    s = squareTri(a);
    printf("%f", s);
    printf("\n\n");

    printf("perimTri:\n");
    p = perimTri(a);
    printf("%f", p);
    printf("\n\n");

    rotate90(&a);
    printf("rotate90:\n");
    printf("%d %d\n", a.x1, a.y1);
    printf("%d %d\n", a.x2, a.y2);
    printf("%d %d\n", a.x3, a.y3);
}
